//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.FibService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mlg.ru/24/14", ConfigurationName="FibService.IFibonacchContract", CallbackContract=typeof(Client.FibService.IFibonacchContractCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFibonacchContract {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.mlg.ru/24/14/IFibonacchContract/Clear")]
        void Clear();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.mlg.ru/24/14/IFibonacchContract/Clear")]
        System.Threading.Tasks.Task ClearAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.mlg.ru/24/14/IFibonacchContract/Fibonacchi")]
        void Fibonacchi(int n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.mlg.ru/24/14/IFibonacchContract/Fibonacchi")]
        System.Threading.Tasks.Task FibonacchiAsync(int n);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFibonacchContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.mlg.ru/24/14/IFibonacchContract/Equals")]
        void Equals(long result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.mlg.ru/24/14/IFibonacchContract/CalculationHistory")]
        void CalculationHistory(string eqn);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFibonacchContractChannel : Client.FibService.IFibonacchContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FibonacchContractClient : System.ServiceModel.DuplexClientBase<Client.FibService.IFibonacchContract>, Client.FibService.IFibonacchContract {
        
        public FibonacchContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FibonacchContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FibonacchContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FibonacchContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FibonacchContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Clear() {
            base.Channel.Clear();
        }
        
        public System.Threading.Tasks.Task ClearAsync() {
            return base.Channel.ClearAsync();
        }
        
        public void Fibonacchi(int n) {
            base.Channel.Fibonacchi(n);
        }
        
        public System.Threading.Tasks.Task FibonacchiAsync(int n) {
            return base.Channel.FibonacchiAsync(n);
        }
    }
}
